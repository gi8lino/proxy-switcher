#!/bin/bash

set -euo pipefail

# Configuration path
path="${PROXY_SWITCHER_CONFIG:-$HOME}/proxy.config"

# Function to prompt the user for setting proxy
# Function to prompt the user for setting proxy
prompt_for_proxy() {
    for PROXY in HTTP_PROXY HTTPS_PROXY; do
        if [ -z "${!PROXY:-}" ]; then
            read -p "No value set for ${PROXY}. Please provide it: " value
            printf "%s=%s\n" "$PROXY" "$value" >> "$path"
            continue
        fi

        read -p "${!PROXY} is set as ${PROXY}. Do you want to use it for Proxy Switcher? [y/n] " yn

        case $yn in
            [Yy]* )
                printf "%s=%s\n" "$PROXY" "$value" >> "$path"
                ;;
            [Nn]* )
                ;;
            * )
                printf "Please answer yes or no.\n"
                ;;
        esac
    done
}

# Function to validate the configuration file
validate_config() {
    [ -f "$path" ] || return 1
    return 0
}

# Function to print help message
print_help() {
    cat <<EOF
Usage: proxy [command]

Commands:
  on            : Set the proxy environment variables.
  off           : Unset the proxy environment variables.
  status        : Print the current proxy status.
  show          : Show the current proxy environment variables.
  configuration : Starts the configuration wizard.
  completion    : Generate completion script for bash or zsh.
  help          : Display this help message.

To set up completions:
  Bash:
    source <(proxy completion bash)
  Zsh:
    . <(proxy completion zsh) && compdef _proxy proxy
EOF
}

# Main script execution

# If the configuration file does not exist, check environment variables and prompt if necessary
if ! validate_config; then
    prompt_for_proxy
fi

# If after prompting, the configuration file still does not exist, exit with an error
if ! validate_config; then
    printf "\e[31mERROR:\e[0m No proxy configuration found. Please create a proxy.config file in your home directory %s\n" \
           "or set the HTTP_PROXY and HTTPS_PROXY environment variables."
    exit 1
fi

# Source the configuration file
# shellcheck disable=SC1090
source "${path}"

case "${1:-}" in
    on)
        export HTTP_PROXY="$HTTP_PROXY"
        export HTTPS_PROXY="$HTTPS_PROXY"
        printf "Switched proxy to \e[31mON\e[0m\n"
        ;;
    off)
        unset HTTP_PROXY
        unset HTTPS_PROXY
        printf "Switched proxy to \e[32mOFF\e[0m\n"
        ;;
    status)
        if [ -z "$HTTP_PROXY" ]; then
            printf "HTTP Proxy is \e[32mOFF\e[0m\n"
        else
            printf "HTTP Proxy is \e[31mON\e[0m\n"
        fi

        if [ -z "$HTTPS_PROXY" ]; then
            printf "HTTPS Proxy is \e[32mOFF\e[0m\n"
        else
            printf "HTTPS Proxy is \e[31mON\e[0m\n"
        fi
        ;;
    completion)
        case "$2" in
            bash)
                cat <<EOF
_proxy() {
    local cur=\${COMP_WORDS[COMP_CWORD]}
    case \${COMP_CWORD} in
        1)
            COMPREPLY=( \$(compgen -W "on off print completion help" -- \$cur) )
            ;;
        2)
            if [ \${COMP_WORDS[1]} = "completion" ]; then
                COMPREPLY=( \$(compgen -W "bash zsh" -- \$cur) )
            fi
            ;;
    esac
    return 0
}
complete -F _proxy proxy
EOF
                ;;
            zsh)
                cat <<EOF
_proxy() {
    local -a main_commands
    main_commands=(
        'on:Set the proxy environment variables.'
        'off:Unset the proxy environment variables.'
        'status:Print the current proxy status.'
        'show:Print the current proxy settings.'
        'configure:Starts the configuration wizard.'
        'completion:Generate completion script.'
        'help:Display the help message.'
    )
    local -a completion_commands
    completion_commands=(
        'bash:Generate bash completion script.'
        'zsh:Generate zsh completion script.'
    )
    case "\$words[2]" in
        on|off|status|show|configure)
            return
            ;;
        completion)
            _describe -t commands -V "completion options" completion_commands && return
            ;;
        *)
            _describe -t commands -V "proxy commands" main_commands && return
            ;;
    esac
}
EOF
                ;;
            *)
                printf "Available completions: bash, zsh\n"
                ;;
        esac
        ;;
    show)
        printf "HTTP_PROXY: %s\nHTTPS_PROXY: %s\n" "$HTTP_PROXY" "$HTTPS_PROXY"
        ;;
    configure)
        prompt_for_proxy
        ;;
    help)
        print_help
        ;;
    *)
        printf "Use 'proxy help' to see available commands.\n"
        exit 1
        ;;
esac
